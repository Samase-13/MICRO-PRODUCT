# .github/workflows/deploy-local.yml
# üöÄ Pipeline de CI/CD para despliegue en un Self-Hosted Runner (Aplicaci√≥n sin base de datos)

name: Deploy Locally (No DB)

on:
  # Se ejecuta en cada push a la rama 'main'
  push:
    branches: [ "main" ]
  # Permite ejecutar el pipeline manualmente desde la pesta√±a Actions de GitHub
  workflow_dispatch:

# Variables de entorno para que docker-compose las use
# Se han simplificado, eliminando las de la base de datos
env:
  DOCKER_PROJECT_NAME: 'mi-nueva-app-project' # Nombre del proyecto en Docker Compose para aislarlo
  APP_CONTAINER_NAME: 'mi-nueva-app'          # Nombre del contenedor de la aplicaci√≥n

jobs:
  build-and-deploy:
    name: Build and Deploy
    # ¬°Importante! Este job DEBE ejecutarse en tu runner autohospedado
    runs-on: self-hosted

    steps:
      # 1. Descargar el c√≥digo del repositorio en el runner
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configurar el entorno de Java y Maven en el runner
      # Aseg√∫rate de que tu runner tenga Java y Maven instalados,
      # o usa esta acci√≥n para que GitHub los instale.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # 3. Construir el proyecto y crear el .jar (saltando las pruebas)
      - name: Build with Maven
        run: mvn -B clean package -DskipTests

      # 4. Desplegar la aplicaci√≥n usando Docker Compose
      # Este paso es ahora mucho m√°s simple sin la base de datos
      - name: Deploy with Docker Compose
        run: |
          echo "‚úÖ Iniciando despliegue en el runner..."
          
          # 1Ô∏è‚É£ Limpiamos cualquier despliegue anterior del mismo proyecto
          echo "üßπ Limpiando despliegue anterior (si existe)..."
          docker-compose -p ${{ env.DOCKER_PROJECT_NAME }} down --remove-orphans || echo "‚ö†Ô∏è No se encontr√≥ un despliegue anterior para limpiar. Continuando..."

          # 2Ô∏è‚É£ Construimos la nueva imagen de la app y levantamos el servicio
          echo "üèóÔ∏è Construyendo y levantando el servicio de la aplicaci√≥n..."
          docker-compose -p ${{ env.DOCKER_PROJECT_NAME }} up -d --build

          # 3Ô∏è‚É£ Verificamos el estado final del contenedor
          echo "üîç Verificando estado del contenedor..."
          docker-compose -p ${{ env.DOCKER_PROJECT_NAME }} ps
          
          echo "üóíÔ∏è Mostrando los √∫ltimos logs de la aplicaci√≥n:"
          docker logs --tail 100 ${{ env.APP_CONTAINER_NAME }}
          
          echo "üéâ ‚úì Despliegue completado exitosamente."