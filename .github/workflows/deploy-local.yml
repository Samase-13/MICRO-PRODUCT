# .github/workflows/deploy-local.yml
# 🚀 Pipeline de CI/CD para despliegue en un Self-Hosted Runner (Aplicación sin base de datos)

name: Deploy Locally (No DB)

on:
  # Se ejecuta en cada push a la rama 'main'
  push:
    branches: [ "main" ]
  # Permite ejecutar el pipeline manualmente desde la pestaña Actions de GitHub
  workflow_dispatch:

# Variables de entorno para que docker-compose las use
# Se han simplificado, eliminando las de la base de datos
env:
  DOCKER_PROJECT_NAME: 'mi-nueva-app-project' # Nombre del proyecto en Docker Compose para aislarlo
  APP_CONTAINER_NAME: 'mi-nueva-app'          # Nombre del contenedor de la aplicación

# ... (resto del archivo sin cambios) ...

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: self-hosted

    steps:
      # ... (pasos de checkout, setup-java y build sin cambios) ...

      # 4. Desplegar la aplicación usando Docker Compose (CORREGIDO)
      - name: Deploy with Docker Compose
        run: |
          echo "✅ Iniciando despliegue en el runner..."
          
          # ⬇️⬇️⬇️ LÍNEA AÑADIDA ⬇️⬇️⬇️
          # Navegamos al directorio donde está el docker-compose.yml
          cd docker
          
          # 1️⃣ Limpiamos cualquier despliegue anterior del mismo proyecto
          echo "🧹 Limpiando despliegue anterior (si existe)..."
          docker-compose -p ${{ env.DOCKER_PROJECT_NAME }} down --remove-orphans || echo "⚠️ No se encontró un despliegue anterior. Continuando..."

          # 2️⃣ Construimos la nueva imagen de la app y levantamos el servicio
          echo "🏗️ Construyendo y levantando el servicio de la aplicación..."
          docker-compose -p ${{ env.DOCKER_PROJECT_NAME }} up -d --build

          # 3️⃣ Verificamos el estado final del contenedor
          echo "🔍 Verificando estado del contenedor..."
          docker-compose -p ${{ env.DOCKER_PROJECT_NAME }} ps
          
          echo "🗒️ Mostrando los últimos logs de la aplicación:"
          # Ajuste: docker logs usa el nombre del contenedor, no el del proyecto
          docker logs --tail 100 ${{ env.APP_CONTAINER_NAME }}
          
          echo "🎉 ✓ Despliegue completado exitosamente."