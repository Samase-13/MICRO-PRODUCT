# .github/workflows/deploy-local.yml
# üöÄ Pipeline de CI/CD para despliegue en Self-Hosted Runner (App sin Base de Datos)

name: Deploy App Locally (No DB)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: # Permite ejecutar el pipeline manualmente

# Variables de entorno simplificadas para este proyecto
env:
  DOCKER_PROJECT_NAME: 'mi-nueva-app-project'
  APP_CONTAINER_NAME: 'mi-nueva-app'
  COMPOSE_FILE_PATH: 'docker/docker-compose.yml' # Ruta al archivo compose

jobs:
  build-and-deploy:
    name: Build and Deploy App
    runs-on: self-hosted

    steps:
      # 1Ô∏è‚É£ Descargar el c√≥digo del repositorio en el runner
      - name: 1. Checkout Repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configurar el entorno de Java y Maven en el runner
      - name: 2. Set up JDK 17 & Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # 3Ô∏è‚É£ Construir el proyecto y crear el .jar
      - name: 3. Build Project with Maven
        run: mvn -B clean package -DskipTests

      # 4Ô∏è‚É£ Desplegar la aplicaci√≥n usando Docker Compose
      - name: 4. Deploy with Docker Compose
        run: |
          echo "‚úÖ Iniciando despliegue en el runner..."
          
          # Se ejecutan los comandos desde la ra√≠z del proyecto para un contexto correcto.
          
          # Paso A: Limpiar cualquier despliegue anterior
          echo "üßπ Limpiando despliegue anterior (si existe)..."
          docker-compose -f ${{ env.COMPOSE_FILE_PATH }} -p ${{ env.DOCKER_PROJECT_NAME }} down --remove-orphans || echo "‚ö†Ô∏è No se encontr√≥ un despliegue anterior para limpiar."

          # Paso B: Construir la nueva imagen de la app y levantar el servicio
          echo "üèóÔ∏è Construyendo y levantando el servicio de la aplicaci√≥n..."
          docker-compose -f ${{ env.COMPOSE_FILE_PATH }} -p ${{ env.DOCKER_PROJECT_NAME }} up -d --build

          # Paso C: Verificar el estado final del contenedor
          echo "üîç Verificando estado del contenedor..."
          docker-compose -f ${{ env.COMPOSE_FILE_PATH }} -p ${{ env.DOCKER_PROJECT_NAME }} ps
          
          # Paso D: Mostrar los √∫ltimos logs de la aplicaci√≥n
          echo "üóíÔ∏è Mostrando los √∫ltimos logs de la aplicaci√≥n:"
          docker logs --tail 100 ${{ env.APP_CONTAINER_NAME }}
          
          echo "üéâ ‚úì Despliegue completado exitosamente."